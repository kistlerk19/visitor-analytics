stages:
  - validate
  - build
  - deploy
  - test

variables:
  AWS_DEFAULT_REGION: eu-west-1
  TF_ROOT: disaster-recovery
  ENABLE_DR: "false"
  DISABLE_DR: "true"

validate:
  stage: validate
  image:
    name: hashicorp/terraform:1.5
    entrypoint: [""]
  script:
    - cd $TF_ROOT
    - terraform init -backend=false
    - terraform fmt
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_COMMIT_BRANCH == "main"'
    - if: '$CI_COMMIT_BRANCH == "develop"'

build:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - apk add --no-cache aws-cli
    - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
    - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
    - aws configure set default.region $AWS_DEFAULT_REGION
  script:
    - aws ecr describe-repositories --repository-names lamp-apache || aws ecr create-repository --repository-name lamp-apache
    - aws ecr get-login-password | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
    - docker build -f disaster-recovery/Dockerfile.apache-rds -t lamp-apache .
    - docker tag lamp-apache:latest $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/lamp-apache:$CI_COMMIT_SHA
    - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/lamp-apache:$CI_COMMIT_SHA
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
    - if: '$CI_COMMIT_BRANCH == "develop"'

deploy:
  stage: deploy
  image:
    name: alpine:latest
    entrypoint: [""]
  before_script:
    - apk add --no-cache aws-cli curl unzip
    - wget https://releases.hashicorp.com/terraform/1.5.7/terraform_1.5.7_linux_amd64.zip
    - unzip terraform_1.5.7_linux_amd64.zip
    - mv terraform /usr/local/bin/
    - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
    - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
    - aws configure set default.region $AWS_DEFAULT_REGION
    - cd $TF_ROOT
  script:
    - aws ec2 describe-addresses --query 'Addresses[?AssociationId==null].AllocationId' --output text | xargs -n1 aws ec2 release-address --allocation-id 2>/dev/null || true
    - aws rds delete-db-instance --db-instance-identifier lamp-visitor-analytics-db-replica --skip-final-snapshot --region eu-central-1 2>/dev/null || true
    - aws ecs update-service --cluster lamp-visitor-analytics --service lamp-visitor-analytics --desired-count 0 --region eu-west-1 2>/dev/null || true
    - aws ecs delete-service --cluster lamp-visitor-analytics --service lamp-visitor-analytics --region eu-west-1 2>/dev/null || true
    - aws ecs delete-cluster --cluster lamp-visitor-analytics --region eu-west-1 2>/dev/null || true
    - aws rds delete-db-instance --db-instance-identifier lamp-visitor-analytics-db --skip-final-snapshot 2>/dev/null || true
    - |
      aws ec2 describe-vpcs --filters "Name=is-default,Values=false" --query 'Vpcs[].VpcId' --output text | while read vpc; do
        aws elbv2 describe-load-balancers --query "LoadBalancers[?VpcId=='$vpc'].LoadBalancerArn" --output text | xargs -n1 aws elbv2 delete-load-balancer --load-balancer-arn 2>/dev/null || true
        aws ec2 describe-nat-gateways --filter "Name=vpc-id,Values=$vpc" --query 'NatGateways[].NatGatewayId' --output text | xargs -n1 aws ec2 delete-nat-gateway --nat-gateway-id 2>/dev/null || true
        sleep 30
        aws ec2 describe-subnets --filters "Name=vpc-id,Values=$vpc" --query 'Subnets[].SubnetId' --output text | xargs -n1 aws ec2 delete-subnet --subnet-id 2>/dev/null || true
        aws ec2 describe-internet-gateways --filters "Name=attachment.vpc-id,Values=$vpc" --query 'InternetGateways[].InternetGatewayId' --output text | xargs -n1 -I {} aws ec2 detach-internet-gateway --internet-gateway-id {} --vpc-id $vpc 2>/dev/null || true
        aws ec2 describe-internet-gateways --filters "Name=attachment.vpc-id,Values=$vpc" --query 'InternetGateways[].InternetGatewayId' --output text | xargs -n1 aws ec2 delete-internet-gateway --internet-gateway-id 2>/dev/null || true
        aws ec2 delete-vpc --vpc-id $vpc 2>/dev/null || true
      done
    - echo 'primary_region = "'$AWS_DEFAULT_REGION'"' > terraform.tfvars
    - echo 'dr_region = "eu-central-1"' >> terraform.tfvars
    - echo 'environment = "prod"' >> terraform.tfvars
    - echo 'notification_email = "'$NOTIFICATION_EMAIL'"' >> terraform.tfvars
    - echo 'aws_account_id = "'$AWS_ACCOUNT_ID'"' >> terraform.tfvars
    - echo 'enable_dr = '$ENABLE_DR >> terraform.tfvars
    - echo 'image_tag = "'$CI_COMMIT_SHA'"' >> terraform.tfvars
    - rm -rf .terraform terraform.tfstate* || true
    - terraform init
    - terraform refresh -auto-approve || true
    - terraform plan -out=tfplan
    - terraform apply -auto-approve tfplan
  artifacts:
    paths:
      - $TF_ROOT/.terraform/
    expire_in: 1 hour
  needs:
    - build
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'

test:
  stage: test
  image: alpine:latest
  before_script:
    - apk add --no-cache curl jq unzip aws-cli
    - wget https://releases.hashicorp.com/terraform/1.5.7/terraform_1.5.7_linux_amd64.zip
    - unzip terraform_1.5.7_linux_amd64.zip
    - mv terraform /usr/local/bin/
    - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
    - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
    - aws configure set default.region $AWS_DEFAULT_REGION
    - cd $TF_ROOT
  script:
    - export ALB_DNS=$(terraform output -raw primary_alb_dns)
    - echo "🔍 Checking ECS service status..."
    - aws ecs describe-services --cluster lamp-visitor-analytics --services lamp-visitor-analytics --query 'services[0].{runningCount:runningCount,desiredCount:desiredCount,taskDefinition:taskDefinition}'
    - echo "⏳ Waiting for deployment to stabilize..."
    - sleep 120
    - echo "🏥 Health Check Test"
    - curl -f -s http://$ALB_DNS/health.php | jq '.' || echo "Health check failed - checking logs"
    - aws logs tail /ecs/lamp-visitor-analytics --since 5m || true
    - echo "🌐 Main Application Test"
    - curl -f -s http://$ALB_DNS/ > /dev/null || echo "Main app failed"
    - echo "📊 API Test"
    - curl -f -s http://$ALB_DNS/api.php?action=stats | jq '.' || echo "API test failed"
    - echo "🎉 Tests completed"
  needs:
    - deploy
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'