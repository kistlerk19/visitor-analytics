stages:
  - validate
  - build
  - deploy
  - optimize

variables:
  AWS_DEFAULT_REGION: eu-west-1
  TF_ROOT: disaster-recovery
  TF_STATE_NAME: visitor-analytics
  ENABLE_DR: "false"  # Set to "true" to enable DR automatically

validate:
  stage: validate
  image: hashicorp/terraform:1.5
  script:
    - cd $TF_ROOT
    - terraform --version
    - terraform init -backend=false
    - terraform validate
    - terraform fmt -check
  only:
    - main
    - develop
    - merge_requests

build:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - apk add --no-cache aws-cli
    - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
    - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
    - aws configure set default.region $AWS_DEFAULT_REGION
  script:
    - aws ecr get-login-password | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
    - cd disaster-recovery
    - docker build -f Dockerfile.apache-rds -t lamp-apache .
    - docker tag lamp-apache:latest $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/lamp-apache:$CI_COMMIT_SHA
    - docker tag lamp-apache:latest $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/lamp-apache:latest
    - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/lamp-apache:$CI_COMMIT_SHA
    - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/lamp-apache:latest
  only:
    - main
    - develop

deploy_infrastructure:
  stage: deploy
  image: hashicorp/terraform:1.5
  before_script:
    - apk add --no-cache aws-cli
    - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
    - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
    - aws configure set default.region $AWS_DEFAULT_REGION
    - cd $TF_ROOT
  script:
    - |
      cat > terraform.tfvars << EOF
      primary_region = "$AWS_DEFAULT_REGION"
      dr_region = "eu-central-1"
      environment = "prod"
      notification_email = "$NOTIFICATION_EMAIL"
      aws_account_id = "$AWS_ACCOUNT_ID"
      enable_dr = false
      EOF
    - terraform init
    - terraform plan -out=tfplan
    - terraform apply -auto-approve tfplan
  artifacts:
    paths:
      - $TF_ROOT/.terraform/
      - $TF_ROOT/terraform.tfstate
    expire_in: 1 hour
  only:
    - main

deploy_application:
  stage: deploy
  image: hashicorp/terraform:1.5
  before_script:
    - apk add --no-cache aws-cli
    - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
    - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
    - aws configure set default.region $AWS_DEFAULT_REGION
    - cd $TF_ROOT
  script:
    - |
      # Update terraform.tfvars with new image tag
      cat > terraform.tfvars << EOF
      primary_region = "$AWS_DEFAULT_REGION"
      dr_region = "eu-central-1"
      environment = "prod"
      notification_email = "$NOTIFICATION_EMAIL"
      aws_account_id = "$AWS_ACCOUNT_ID"
      enable_dr = false
      image_tag = "$CI_COMMIT_SHA"
      EOF
    - terraform plan -out=tfplan-app
    - terraform apply -auto-approve tfplan-app
  needs:
    - build
    - deploy_infrastructure
  only:
    - main

enable_dr:
  stage: optimize
  image: hashicorp/terraform:1.5
  before_script:
    - apk add --no-cache aws-cli
    - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
    - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
    - aws configure set default.region $AWS_DEFAULT_REGION
    - cd $TF_ROOT
  script:
    - |
      cat > terraform.tfvars << EOF
      primary_region = "$AWS_DEFAULT_REGION"
      dr_region = "eu-central-1"
      environment = "prod"
      notification_email = "$NOTIFICATION_EMAIL"
      aws_account_id = "$AWS_ACCOUNT_ID"
      enable_dr = ${ENABLE_DR:-false}
      image_tag = "$CI_COMMIT_SHA"
      EOF
    - terraform init
    - terraform plan -out=tfplan-dr
    - terraform apply -auto-approve tfplan-dr
    - echo "DR infrastructure deployment completed"
  rules:
    - if: '$CI_COMMIT_BRANCH == "main" && $ENABLE_DR == "true"'
  needs:
    - deploy_application

health_check:
  stage: optimize
  image: hashicorp/terraform:1.5
  before_script:
    - apk add --no-cache curl jq
    - cd $TF_ROOT
  script:
    - export ALB_DNS=$(terraform output -raw primary_alb_dns)
    - echo "ALB DNS: $ALB_DNS"
    - echo "Waiting for deployment to stabilize..."
    - sleep 60
    - echo "Testing application endpoints..."
    - |
      for i in {1..5}; do
        echo "Health check attempt $i/5"
        if curl -f http://$ALB_DNS/health.php | jq '.'; then
          echo "✅ Health check passed"
          break
        else
          echo "❌ Health check failed, retrying in 30s..."
          sleep 30
        fi
      done
    - |
      echo "Testing main application..."
      if curl -f http://$ALB_DNS/ > /dev/null; then
        echo "✅ Main application accessible"
      else
        echo "❌ Main application failed"
        exit 1
      fi
    - echo "🎉 All health checks completed successfully"
  needs:
    - deploy_application
  only:
    - main