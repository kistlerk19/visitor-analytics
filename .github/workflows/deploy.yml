name: Deploy LAMP Stack with Disaster Recovery

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  AWS_DEFAULT_REGION: eu-west-1
  TF_ROOT: disaster-recovery
  ENABLE_DR: false

jobs:
  validate:
    name: Validate Terraform
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.7
          
      - name: Terraform Format
        run: |
          cd $TF_ROOT
          terraform fmt
          
      - name: Terraform Format Check
        run: |
          cd $TF_ROOT
          terraform fmt -check
          
      - name: Terraform Init
        run: |
          cd $TF_ROOT
          terraform init -backend=false
          
      - name: Terraform Validate
        run: |
          cd $TF_ROOT
          terraform validate

  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: validate
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    steps:
      - uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}
          
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        
      - name: Create ECR repository if not exists
        run: |
          aws ecr describe-repositories --repository-names lamp-apache || \
          aws ecr create-repository --repository-name lamp-apache
          
      - name: Build, tag, and push image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: lamp-apache
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -f disaster-recovery/Dockerfile.apache-rds -t $ECR_REPOSITORY .
          docker tag $ECR_REPOSITORY:latest $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  deploy:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: [validate, build]
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}
          
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.7
          
      - name: Wait for ECS service to drain
        run: |
          echo "🔍 Checking for existing ECS services..."
          if aws ecs describe-services --cluster lamp-visitor-analytics --services lamp-visitor-analytics 2>/dev/null | grep -q "ACTIVE\|DRAINING"; then
            echo "⏳ ECS service exists, scaling down and waiting for drain..."
            aws ecs update-service --cluster lamp-visitor-analytics --service lamp-visitor-analytics --desired-count 0 2>/dev/null || true
            echo "⏳ Waiting for service to drain (up to 10 minutes)..."
            aws ecs wait services-stable --cluster lamp-visitor-analytics --services lamp-visitor-analytics --cli-read-timeout 600 || true
            echo "🗑️ Deleting drained service..."
            aws ecs delete-service --cluster lamp-visitor-analytics --service lamp-visitor-analytics 2>/dev/null || true
            sleep 30
          fi
          
      - name: Create terraform.tfvars
        run: |
          cd $TF_ROOT
          cat > terraform.tfvars << EOF
          primary_region = "${{ env.AWS_DEFAULT_REGION }}"
          dr_region = "eu-central-1"
          environment = "prod"
          notification_email = "${{ secrets.NOTIFICATION_EMAIL }}"
          aws_account_id = "${{ secrets.AWS_ACCOUNT_ID }}"
          enable_dr = ${{ env.ENABLE_DR }}
          image_tag = "${{ github.sha }}"
          EOF
          
      - name: Create S3 bucket for state
        run: |
          aws s3 mb s3://lamp-visitor-analytics-terraform-state-${{ secrets.AWS_ACCOUNT_ID }} --region ${{ env.AWS_DEFAULT_REGION }} 2>/dev/null || true
          aws s3api put-bucket-versioning --bucket lamp-visitor-analytics-terraform-state-${{ secrets.AWS_ACCOUNT_ID }} --versioning-configuration Status=Enabled 2>/dev/null || true
          
      - name: Update backend configuration
        run: |
          cd $TF_ROOT
          cat > backend.tf << EOF
          terraform {
            backend "s3" {
              bucket = "lamp-visitor-analytics-terraform-state-${{ secrets.AWS_ACCOUNT_ID }}"
              key    = "terraform.tfstate"
              region = "${{ env.AWS_DEFAULT_REGION }}"
            }
          }
          EOF
          
      - name: Terraform Init
        run: |
          cd $TF_ROOT
          terraform init
          
      - name: Terraform Plan
        run: |
          cd $TF_ROOT
          terraform refresh -auto-approve || true
          terraform plan -out=tfplan
          
      - name: Terraform Apply
        run: |
          cd $TF_ROOT
          terraform apply -auto-approve tfplan
          
      - name: Verify Deployment
        run: |
          cd $TF_ROOT
          echo "Verifying Terraform outputs..."
          terraform output || echo "No outputs available yet"
          
      - name: Upload Terraform State
        uses: actions/upload-artifact@v4
        with:
          name: terraform-state
          path: |
            disaster-recovery/.terraform/
            disaster-recovery/terraform.tfstate*
            disaster-recovery/terraform.tfvars
          retention-days: 1

  test:
    name: Test Deployment
    runs-on: ubuntu-latest
    needs: [validate, deploy]
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      
      - name: Download Terraform State
        uses: actions/download-artifact@v4
        with:
          name: terraform-state
          path: .
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}
          
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.7
          
      - name: Get ALB DNS
        id: get-alb
        run: |
          cd $TF_ROOT
          # Recreate backend configuration
          cat > backend.tf << EOF
          terraform {
            backend "s3" {
              bucket = "lamp-visitor-analytics-terraform-state-${{ secrets.AWS_ACCOUNT_ID }}"
              key    = "terraform.tfstate"
              region = "${{ env.AWS_DEFAULT_REGION }}"
            }
          }
          EOF
          # Recreate terraform.tfvars
          cat > terraform.tfvars << EOF
          primary_region = "${{ env.AWS_DEFAULT_REGION }}"
          dr_region = "eu-central-1"
          environment = "prod"
          notification_email = "${{ secrets.NOTIFICATION_EMAIL }}"
          aws_account_id = "${{ secrets.AWS_ACCOUNT_ID }}"
          enable_dr = ${{ env.ENABLE_DR }}
          image_tag = "${{ github.sha }}"
          EOF
          terraform init
          ALB_DNS=$(terraform output -raw primary_alb_dns 2>/dev/null || echo "")
          if [ -z "$ALB_DNS" ]; then
            echo "❌ No ALB DNS found in outputs"
            terraform output
            exit 1
          fi
          echo "alb_dns=$ALB_DNS" >> $GITHUB_OUTPUT
          
      - name: Check ECS service status
        run: |
          echo "🔍 Checking ECS service status..."
          aws ecs describe-services --cluster lamp-visitor-analytics --services lamp-visitor-analytics --query 'services[0].{runningCount:runningCount,desiredCount:desiredCount,taskDefinition:taskDefinition}'
          
      - name: Wait for deployment
        run: |
          echo "⏳ Waiting for deployment to stabilize..."
          echo "🔍 Checking ECS task health..."
          aws ecs describe-services --cluster lamp-visitor-analytics --services lamp-visitor-analytics
          echo "📋 Checking task definitions..."
          aws ecs list-tasks --cluster lamp-visitor-analytics --service-name lamp-visitor-analytics
          echo "⏳ Waiting 3 minutes for tasks to start..."
          sleep 180
          
      - name: Health Check Test
        run: |
          echo "🏥 Health Check Test"
          echo "ALB DNS: ${{ steps.get-alb.outputs.alb_dns }}"
          echo "🔍 Checking ALB target health..."
          aws elbv2 describe-target-health --target-group-arn $(aws elbv2 describe-target-groups --names lamp-visitor-analytics --query 'TargetGroups[0].TargetGroupArn' --output text) || true
          echo "🔍 Testing health endpoint..."
          curl -v http://${{ steps.get-alb.outputs.alb_dns }}/health-simple.php || {
            echo "Health check failed - debugging..."
            echo "📋 ECS Task Status:"
            aws ecs describe-tasks --cluster lamp-visitor-analytics --tasks $(aws ecs list-tasks --cluster lamp-visitor-analytics --service-name lamp-visitor-analytics --query 'taskArns[0]' --output text) || true
            echo "📋 Container Logs:"
            aws logs tail /ecs/lamp-visitor-analytics --since 10m || true
            exit 1
          }
          
      - name: Main Application Test
        run: |
          echo "🌐 Main Application Test"
          curl -f -s http://${{ steps.get-alb.outputs.alb_dns }}/ > /dev/null || {
            echo "Main app failed"
            exit 1
          }
          
      - name: API Test
        run: |
          echo "📊 API Test"
          curl -f -s http://${{ steps.get-alb.outputs.alb_dns }}/api.php?action=stats | jq '.' || {
            echo "API test failed"
            exit 1
          }
          
      - name: Test Results
        run: echo "🎉 All tests completed successfully"

  enable-dr:
    name: Enable Disaster Recovery
    runs-on: ubuntu-latest
    needs: [validate, test]
    if: github.ref == 'refs/heads/main' && vars.ENABLE_DR == 'true'
    steps:
      - uses: actions/checkout@v4
      
      - name: Download Terraform State
        uses: actions/download-artifact@v4
        with:
          name: terraform-state
          path: .
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}
          
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.7
          
      - name: Enable DR Infrastructure
        run: |
          cd $TF_ROOT
          cat > terraform.tfvars << EOF
          primary_region = "${{ env.AWS_DEFAULT_REGION }}"
          dr_region = "eu-central-1"
          environment = "prod"
          notification_email = "${{ secrets.NOTIFICATION_EMAIL }}"
          aws_account_id = "${{ secrets.AWS_ACCOUNT_ID }}"
          enable_dr = true
          image_tag = "${{ github.sha }}"
          EOF
          terraform init
          terraform plan -out=tfplan-dr
          terraform apply -auto-approve tfplan-dr
          echo "DR infrastructure deployment completed"